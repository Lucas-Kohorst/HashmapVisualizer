{"version":3,"sources":["HashmapVisual.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["HashMap","require","HashmapVisual","props","hashCode","s","h","l","length","i","charCodeAt","createBuckets","buckets","bucketsList","push","Grid","item","xs","key","className","size","_iterateBuckets","map","state","type","value","equation","e","this","setState","target","Math","abs","oldMap","set","delete","keys","forEach","JSON","stringify","join","FormControl","InputLabel","htmlFor","Select","onChange","_typeChange","bind","inputProps","id","MenuItem","container","spacing","TextField","label","_keyChange","margin","_itemChange","_bucketChange","Button","variant","onClick","_handleClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.2c910b74.chunk.js","sourcesContent":["import React, { Component, Children } from \"react\";\nimport \"./App.css\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { FaBitbucket } from \"react-icons/fa\";\n\nimport Tree from \"react-d3-tree\";\n\nvar HashMap = require(\"hashmap\");\n\nclass HashmapVisual extends Component {\n  constructor(props) {\n    super(props);\n    var map = new HashMap();\n    this.state = {\n      type: \"insert\",\n      key: 1,\n      value: 1,\n      buckets: 16,\n      map: map,\n      equation: \"1 % 16 = 1\"\n    };\n  }\n\n  /**\n   * @see https://gist.github.com/hyamamoto/fd435505d29ebfa3d9716fd2be8d42f0\n   */\n  hashCode = function(s) {\n    var h = 0,\n      l = s.length,\n      i = 0;\n    if (l > 0) while (i < l) h = ((h << 5) - h + s.charCodeAt(i++)) | 0;\n    return h;\n  };\n\n  _typeChange(e) {\n    this.setState({ type: e.target.value });\n  }\n\n  _keyChange(e) {\n    this.setState({\n      key: e.target.value,\n      equation:\n        Math.abs(this.hashCode(e.target.value)) +\n        \" % \" +\n        this.state.buckets +\n        \" = \" +\n        (e.target.value % this.state.buckets)\n    });\n  }\n\n  _itemChange(e) {\n    this.setState({\n      value: e.target.value\n    });\n  }\n\n  _bucketChange(e) {\n    this.setState({\n      buckets: e.target.value,\n      equation:\n        Math.abs(this.hashCode(this.state.key)) +\n        \" % \" +\n        e.target.value +\n        \" = \" +\n        (this.state.key % e.target.value)\n    });\n  }\n\n  _handleClick() {\n    switch (this.state.type) {\n      case \"insert\":\n        var oldMap = this.state.map.set(this.state.key, this.state.value);\n        this.setState({\n          map: oldMap\n        });\n        break;\n      case \"delete\":\n        var oldMap = this.state.map.delete(this.state.key, this.state.value);\n        this.setState({\n          map: oldMap\n        });\n        break;\n      default:\n        break;\n    }\n  }\n\n  _iterateBuckets(i) {\n    var keys = []\n    this.state.map.forEach((value, key) => {\n      if (Math.abs(this.hashCode(key)) % this.state.buckets == i) {\n         keys.push(JSON.stringify({ key, value }));\n      }\n    });\n    return <p>{keys.join()}</p>;\n  }\n\n  createBuckets = buckets => {\n    let bucketsList = [];\n    for (var i = 0; i < buckets; i++) {\n      bucketsList.push(\n        <Grid item xs={1} key={i} className={\"bucket\"}>\n          <p>{i}</p>\n          <FaBitbucket size={\"3em\"} />\n          {this._iterateBuckets(i)}\n        </Grid>\n      );\n    }\n    return bucketsList;\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Hashmap Visualizer</h1>\n        <p>\n          A HashMap is a data structure that stores keys and values. In a\n          bucketed system a key value pair is placed into a bucket as denoted by\n          object.hashCode() % n\n        </p>\n        <Grid item xs={12}>\n          <FormControl className={\"select-box\"}>\n            <InputLabel htmlFor=\"age-simple\">Type</InputLabel>\n            <Select\n              value={this.state.type}\n              onChange={this._typeChange.bind(this)}\n              inputProps={{\n                type: this.state.type,\n                id: \"age-simple\"\n              }}\n            >\n              <MenuItem value={\"insert\"}>Insert</MenuItem>\n              {/* <MenuItem value={\"update\"}>Update</MenuItem> */}\n              <MenuItem value={\"delete\"}>Delete</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid container spacing={3}>\n          <Grid item xs={4}>\n            <TextField\n              id=\"standard-name\"\n              label=\"Key\"\n              value={this.state.key}\n              onChange={this._keyChange.bind(this)}\n              margin=\"normal\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              id=\"standard-name\"\n              label=\"Value\"\n              value={this.state.value}\n              onChange={this._itemChange.bind(this)}\n              margin=\"normal\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              id=\"standard-name\"\n              label=\"Buckets\"\n              value={this.state.buckets}\n              onChange={this._bucketChange.bind(this)}\n              margin=\"normal\"\n            />\n          </Grid>\n        </Grid>\n        <h3>{this.state.equation}</h3>\n        <Button variant=\"contained\" onClick={this._handleClick.bind(this)}>\n          {this.state.type}\n        </Button>\n        <Grid container className={\"buckets\"}>\n          {this.createBuckets(this.state.buckets)}\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport { HashmapVisual };\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { HashmapVisual } from './HashmapVisual'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashmapVisual />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}
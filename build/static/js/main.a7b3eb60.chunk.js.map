{"version":3,"sources":["logo.svg","HashmapVisual.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HashmapVisual","props","createBuckets","buckets","bucketsList","i","push","Grid","item","xs","key","className","size","_iterateBuckets","state","type","value","map","equation","s","h","console","log","e","this","setState","target","Math","abs","_hashCode","oldMap","index","indexOf","splice","keys","Object","forEach","toString","JSON","stringify","join","FormControl","InputLabel","htmlFor","Select","onChange","_typeChange","bind","inputProps","id","MenuItem","container","spacing","TextField","label","_keyChange","margin","_itemChange","underlineStyle","_bucketChange","Button","variant","onClick","_handleClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7b3eb60.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component, Children } from \"react\";\nimport \"./App.css\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { FaBitbucket } from \"react-icons/fa\";\n\nclass HashmapVisual extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: \"insert\",\n      key: 1,\n      value: 1,\n      buckets: 16,\n      map: [],\n      equation: \"1 % 16 = 1\"\n    };\n  }\n\n  /**\n   * @see https://gist.github.com/hyamamoto/fd435505d29ebfa3d9716fd2be8d42f0\n   */\n  _hashCode(s) {\n    var h = ((2 * s) + 5);\n    console.log(h)\n    return h;\n  };\n\n  _typeChange(e) {\n    this.setState({ type: e.target.value });\n  }\n\n  _keyChange(e) {\n    this.setState({\n      key: e.target.value,\n      equation:\n        Math.abs(this._hashCode(e.target.value)) +\n        \" % \" +\n        this.state.buckets +\n        \" = \" +\n        (Math.abs(this._hashCode(e.target.value)) % this.state.buckets)\n    });\n  }\n\n  _itemChange(e) {\n    this.setState({\n      value: e.target.value\n    });\n  }\n\n  _bucketChange(e) {\n    this.setState({\n      buckets: e.target.value,\n      equation:\n        this.state.key +\n        \" % \" +\n        e.target.value +\n        \" = \" +\n        (Math.abs(this._hashCode(this.state.key)) % e.target.value)\n    });\n}\n\n  _handleClick() {\n    switch (this.state.type) {\n      case \"insert\":\n        var oldMap = this.state.map;\n        oldMap.push({\n          key: this.state.key,\n          value: this.state.value\n        });\n        this.setState({\n          map: oldMap\n        });\n        break;\n      case \"delete\":\n        var index = this.state.map\n          .map(function(e) {\n            return e.key;\n          })\n          .indexOf(this.state.key);\n        this.state.map.splice(index, 1);\n        this.setState({\n          map: oldMap\n        });\n        break;\n      default:\n        break;\n    }\n  }\n\n  _iterateBuckets(index) {\n    var keys = [];\n    var map = this.state.map\n    var buckets = this.state.buckets\n    Object.keys(map).forEach(function(key) {\n      var value = map[key].value\n      var key = map[key].key\n\n      // Hashing\n      var s = key.toString()\n      console.log(s)\n      // Hashing\n      var h = ((2 * s) + 5)\n      h = Math.abs(h) % buckets;\n      console.log(h)\n      console.log(index)\n\n      if ((h) == index) {\n        keys.push(JSON.stringify({ key, value }));\n      }\n    });\n    return <p>{keys.join()}</p>;\n  }\n\n  createBuckets = buckets => {\n    let bucketsList = [];\n    for (var i = 0; i < buckets; i++) {\n      bucketsList.push(\n        <Grid item xs={1} key={i} className={\"bucket\"}>\n          <p>{i}</p>\n          <FaBitbucket size={\"3em\"} />\n          {this._iterateBuckets(i)}\n        </Grid>\n      );\n    }\n    return bucketsList;\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Hashmap Visualizer</h1>\n        <p>\n          A HashMap is a data structure that stores keys and values. In a\n          bucketed system a key value pair is placed into a bucket as denoted by\n          object.hashCode() % n\n        </p>\n        <Grid item xs={12}>\n          <FormControl className={\"select-box\"}>\n            <InputLabel htmlFor=\"age-simple\">Type</InputLabel>\n            <Select\n              value={this.state.type}\n              onChange={this._typeChange.bind(this)}\n              inputProps={{\n                type: this.state.type,\n                id: \"age-simple\"\n              }}\n            >\n              <MenuItem value={\"insert\"}>Insert</MenuItem>\n              {/* <MenuItem value={\"update\"}>Update</MenuItem> */}\n              <MenuItem value={\"delete\"}>Delete</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid container spacing={3}>\n          <Grid item xs={4}>\n            <TextField\n              id=\"standard-name\"\n              label=\"Key\"\n              value={this.state.key}\n              onChange={this._keyChange.bind(this)}\n              margin=\"normal\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              id=\"standard-name\"\n              label=\"Value\"\n              value={this.state.value}\n              onChange={this._itemChange.bind(this)}\n              margin=\"normal\"\n              underlineStyle={{ \"border-color\": \"#000000\" }}\n            ></TextField>\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              id=\"standard-name\"\n              label=\"Buckets\"\n              value={this.state.buckets}\n              onChange={this._bucketChange.bind(this)}\n              margin=\"normal\"\n            />\n          </Grid>\n        </Grid>\n        <h3>{this.state.equation}</h3>\n        <Button variant=\"contained\" onClick={this._handleClick.bind(this)}>\n          {this.state.type}\n        </Button>\n        <Grid container className={\"buckets\"}>\n          {this.createBuckets(this.state.buckets)}\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport { HashmapVisual };\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { HashmapVisual } from './HashmapVisual'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashmapVisual />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}